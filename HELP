=====================
        ABOUT
=====================


This is a library for pretty printing information about a code.
Those who prefer using console output for debugging purposes might consider
this library as a more useful alternative to printf/std::cout/whatever.


Features:

	* Easy to use, but right now not easy to extend

	* Uses only C++/C++11. Does not use any additional preprocessors or
		libraries, except standard library

	* Crossplatform. Tested on Clang 600.0.56, MVS 2010

	* Free for all


Project page:

	https://github.com/shrpnsld/pretty_output




====================
        HELP
====================


$w(expression) - print value of 'expression' and return that value, so can be
used inside other expression.
The name is an abbreviation of 'watch'.

	Example:

	| 4|
	| 5|	int i = 455;
	| 6|	$w(i + 1);
	| 7|
	| 8|	std::string s = "hellomoto!";
	| 9|	$w(s);
	|10|
	|11|	float *pf = new float(789.0f);
	|12|	$w(pf);
	|13|
	|14|	const char *c = NULL;
	|15|	$w(c);
	|16|
	|17|	int r = 123 + $w(*pf);
	|18|

	>
	>	main.cpp:6    |  i + 1 = 456
	>	main.cpp:9    |  s = "hellomoto!"
	>	main.cpp:12   |  pf = 0x7ff8e2404bf0 -> 789
	>	main.cpp:15   |  c = (null)
	>	main.cpp:17   |  *pf = 789
	>


$m(pointer, size, base, byte_order) - print memory under the 'pointer'.
$m(variable, base, byte_order) - print memory of the 'variable'.

'pointer' - address of the memory to be printed. The type of the pointer
determines the grouping of bytes and default 'base'. For example memory under
the 'unsigned char*' pointer will be grouped by 1 byte and use hexadecimal
numbers; memory under 'int*' will be grouped by 4 bytes and use signed decimal
numbers. For unknown types default grouping is by 1 byte and base is
hexadecimal.

'variable' - variable, memory of which will be printed. Parameter 'size' should
not be provided. Default grouping is 1 byte, default 'base' is hexadecimal.

'size' - size of memory is bytes.

'base' (optional) - numeric base for value representation. Can have following
values:
	* pretty_output::BASE_BIN - binary
	* pretty_output::BASE_SDEC - signed decimal
	* pretty_output::BASE_UDEC - unsigned decimal
	* pretty_output::BASE_HEX - hexadecimal (default)

'byte_order' - order of the bytes to use when converting bytes to the numeric
values. Can have following values:
	* pretty_output::BYTE_ORDER_LITTLE_ENDIAN
	* pretty_output::BYTE_ORDER_BIG_ENDIAN
Default value is determined automatically.

The name is an abbreviation of 'memory'.

	Example:

	| 4|
	| 5|	struct s_t
	| 6|	{
	| 7|		int i;
	| 8|		float f;
	| 9|		char c;
	|10|	} s;
	|12|
	|13|	s.i = 456;
	|14|	s.f = 789.123f;
	|15|	s.c = 'r';
	|16|
	|17|	$m(s);
	|18|

	>
	>	main.cpp:17   |  memory of s:
	>				  |      0x7fff54376b10: c8 01 00 00 df 47 45 44 72 02
	>				  |      0x7fff54376b1a: 60 0a
	>				  |
	>


$f - print function or member-function call and return labels. Should be used
inside a function or member-function. Automatically shifts indentation of the
output.
The name is an abbreviation of 'function'.

	Example:

	| 2|
	| 3|	void func()
	| 4|	{$f
	| 5|		float f = 789.0f;
	| 6|		$w(f);
	| 7|	}
	| 8|
	| 9|	int main()
	|10|	{$f
	|11|		int i = 456;
	|12|		$w(i);
	|13|		func();
	|14|
	|15|		return 0;
	|16|	}
	|17|

	>
	>	main.cpp:10   |  [call] int main()
	>	main.cpp:12   |      i = 456
	>	main.cpp:4    |      [call] void func()
	>	main.cpp:6    |          f = 789
	>	main.cpp:4    |      [ret]  void func()
	>	main.cpp:10   |  [ret]  int main()
	>


$c(function) - print 'function' arguments and return value. Should be used at
function call. Automatically shifts indentation of the output.
The name is an abbreviation of 'call'.

	Example:

	| 2|
	| 3|	void func(int i, float f, const std::string &s)
	| 4|	{
	| 5|	}
	| 6|
	...
	| 8|
	| 9|	int i = 456;
	|10|	$c(func)(i, 789, "hellomoto!");
	|11|

	>
	>	main.cpp:11   |  func(456, 789, hellomoto!)
	>


$cm(object, function_name) - print member-function arguments and return value.
Should be used at member-function call. 'object' argument can be of a pointer
or non-pointer type.
The name is an abbreviation of 'member-function'.

	Example:

	| 2|
	| 3|	class some
	| 4|	{
	| 5|	public:
	| 6|		void func(int i, float f, const std::string &s)
	| 7|		{
	| 8|		}
	| 9|	};
	|10|
	...
	|12|
	|13|	some obj;
	|14|	int i = 456;
	|15|	$cm(obj, some::func)(i, 789, "hellomoto!");
	|16|

	>
	>	main.cpp:15   |  some::func(456, 789, hellomoto!)
	>


$return expression - print value of epxression passed to return statement.

	Example:

	| 2|
	| 3|	int add(int a, int b)
	| 4|	{
	| 5|		$return a + b;
	| 6|	}
	| 7|
	...
	| 9|
	|10|	add(456, 789);
	|11|

	>
	>	main.cpp:5    |  return 1245
	>


$if (condition) - print value of the if condition. Automatically shifts
indentation of the output.

	Example:

	| 5|
	| 6|	int i = 0;
	| 7|	$if (i < 2)
	| 8|	{
	| 9|	}
	|10|

	>
	>	main.cpp:7    |  if (i < 2) => true
	>


$for (statements) - print iteration numbers of the for loop. Automatically
shifts indentation of the output.

	Example:

	| 4|
	| 5|	$for (int i = 0; i < 3; ++i)
	| 6|	{
	| 7|		$w(i);
	| 8|	}
	| 9|

	>
	>	main.cpp:5    |  for (int i = 0; i < 3; ++i)
	>	main.cpp:5    |  [iteration #0]
	>	main.cpp:7    |      i = 0
	>	main.cpp:5    |  [iteration #1]
	>	main.cpp:7    |      i = 1
	>	main.cpp:5    |  [iteration #2]
	>	main.cpp:7    |      i = 2
	>


$while (condition) - print iteration conditions of the while loop.
Automatically shifts indentation of the output.

	Example:

	| 5|
	| 6|	int i = 0;
	| 7|	$while (i < 3)
	| 8|	{
	| 9|		$w(i);
	|10|		++i;
	|11|	}
	|12|

	>
	>	main.cpp:7    |  while (i < 3) => true
	>	main.cpp:9    |      i = 0
	>	main.cpp:7    |  while (i < 3) => true
	>	main.cpp:9    |      i = 1
	>	main.cpp:7    |  while (i < 3) => true
	>	main.cpp:9    |      i = 2
	>	main.cpp:7    |  while (i < 3) => false
	>


$_ - shift indentation in the containing scope.

	Example:

	| 5|
	| 6|	int i = 456;
	| 7|	$w(i);
	| 8|
	| 9|	{$_
	|10|		$w(i);
	|11|	}
	|12|
	|13|	$w(i);
	|14|

	>
	>	main.cpp:7    |  i = 456
	>	main.cpp:10   |      i = 456
	>	main.cpp:13   |  i = 456
	>


$p(format, ...) - like printf. The name is an abbreviation of 'printf'.

	Example:

	|13|
	|14|	$p("%i %f %s", 456, 789.0f, "hellomoto!")
	|15|

	>
	>	main.cpp:14   |  // 456 789.000000 hellomoto!
	>


$t(thread_name) - set thread name, that will be printed in the thread header.
The name is an abbreviation of 'thread'.

	Example:

	| 5|
	| 6|	void func()
	| 7|	{$t(worker)
	| 8|		int arr[] = {1, 2, 3};
	| 9|		$for (auto i : arr)
	|10|		{
	|11|			$w(i);
	|12|		}
	|13|	}
	|14|
	|15|	int main()
	|16|	{$t(main) $f
	|17|
	|18|		std::thread t1(func);
	|19|		std::thread t2(func);
	|20|		t1.join();
	|21|		t2.join();
	|22|
	|23|		$return 0;
	|24|	}
	|25|

	>
	>	[Thread: 0x7fff71013300 main]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:16   |  [call] int main()
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  for (auto i : arr)
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  for (auto i : arr)
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #0]
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #0]
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 1
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 1
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #1]
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #1]
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 2
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 2
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #2]
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:9    |  [iteration #2]
	>
	>	[Thread: 0x108285000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 3
	>
	>	[Thread: 0x108308000 worker]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:11   |      i = 3
	>
	>	[Thread: 0x7fff71013300 main]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	>	            main.cpp:23   |      return 0
	>	            main.cpp:16   |  [ret]  int main()
	>




=======================
        OPTIONS
=======================


PRETTY_OUTPUT_ON - turn pretty_output on.

PRETTY_OUTPUT_OFF - turn pretty_output off.

PRETTY_OUTPUT_WIDTH - width, to which output is wrapped (actually wrapping
	only a thread header and dump output). Default is 79.

PRETTY_OUTPUT_THREAD_HEADER_SEPARATOR - char that is used as horizontal
	separator for a thread header. Default is a '~'.

PRETTY_OUTPUT_FILENAME_FIELD_WIDTH - width of the file name field of the
	output. Default is 20.

PRETTY_OUTPUT_FILENAME_FIELD_EXCESS_PADDING - string, that is used to
	indicate wrapped part of the filename. Default is "~".

PRETTY_OUTPUT_LINE_FIELD_WIDTH - width of the file line field of the
	output. Default is 4.

PRETTY_OUTPUT_DELIMITER - string, that is used as a delimiter between
	'file name:line' field and the actual output. Default is " |  " (space,
	pipe, 2 spaces).

PRETTY_OUTPUT_INDENTATION - string, that is used as an indentation for the
	actual output. Default is "    " (4 spaces).

PRETTY_OUTPUT_NO_OUTPUT_SYNC - disables output syncronization. Read details
	in the 'NOTES' section.

PRETTY_OUTPUT_REDIRECTION_H - header file, which contains overrided printing
	routines. Read details in the 'NOTES' section.




=====================
        NOTES
=====================


* If macro 'NDEBUG' is not defined or 'PRETTY_OUTPUT_ON' is defined then the
	pretty_output is turned on. If 'NDEBUG' or 'PRETTY_OUTPUT_OFF' is
	defined then the pretty_output is turned off.

* Macros $c and $cm work only with C++11 and later.

* There is an output synchronization that prevents outputs from different
	threads mixing up. By default this feature is turned on. To disable this
	synchronization define macro PRETTY_OUTPUT_NO_OUTPUT_SYNC.

* Output redirection is done in a little tricky way. You should declare
	'void pretty_output_print(const char *)' and
	'void pretty_output_flush()' functions in a separate header file and
	define macro 'PRETTY_OUTPUT_REDIRECTION_H' with a name of that header
	file.
	For your convinience there's already files for redirecting output to a
	file (pretty_output_to_file.{h,cpp}) and for printing to MVS debug
	output (pretty_output_to_mvs.h). When using pretty_output_to_file, you
	can define macro 'PRETTY_OUTPUT_TO_FILE' with the name of the
	destination file (default is 'pretty_output_log.txt').

